"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = __importDefault(require("crypto"));
var ip_1 = __importDefault(require("ip"));
var debug_1 = __importDefault(require("debug"));
var tlv = __importStar(require("./util/tlv"));
var Service_1 = require("./Service");
var Characteristic_1 = require("./Characteristic");
var RTPProxy_1 = __importDefault(require("./camera/RTPProxy"));
var debug = debug_1.default('StreamController');
var SetupTypes;
(function (SetupTypes) {
    SetupTypes[SetupTypes["SESSION_ID"] = 1] = "SESSION_ID";
    SetupTypes[SetupTypes["STATUS"] = 2] = "STATUS";
    SetupTypes[SetupTypes["ADDRESS"] = 3] = "ADDRESS";
    SetupTypes[SetupTypes["VIDEO_SRTP_PARAM"] = 4] = "VIDEO_SRTP_PARAM";
    SetupTypes[SetupTypes["AUDIO_SRTP_PARAM"] = 5] = "AUDIO_SRTP_PARAM";
    SetupTypes[SetupTypes["VIDEO_SSRC"] = 6] = "VIDEO_SSRC";
    SetupTypes[SetupTypes["AUDIO_SSRC"] = 7] = "AUDIO_SSRC";
})(SetupTypes = exports.SetupTypes || (exports.SetupTypes = {}));
var SetupStatus;
(function (SetupStatus) {
    SetupStatus[SetupStatus["SUCCESS"] = 0] = "SUCCESS";
    SetupStatus[SetupStatus["BUSY"] = 1] = "BUSY";
    SetupStatus[SetupStatus["ERROR"] = 2] = "ERROR";
})(SetupStatus = exports.SetupStatus || (exports.SetupStatus = {}));
var SetupAddressVer;
(function (SetupAddressVer) {
    SetupAddressVer[SetupAddressVer["IPV4"] = 0] = "IPV4";
    SetupAddressVer[SetupAddressVer["IPV6"] = 1] = "IPV6";
})(SetupAddressVer = exports.SetupAddressVer || (exports.SetupAddressVer = {}));
var SetupAddressInfo;
(function (SetupAddressInfo) {
    SetupAddressInfo[SetupAddressInfo["ADDRESS_VER"] = 1] = "ADDRESS_VER";
    SetupAddressInfo[SetupAddressInfo["ADDRESS"] = 2] = "ADDRESS";
    SetupAddressInfo[SetupAddressInfo["VIDEO_RTP_PORT"] = 3] = "VIDEO_RTP_PORT";
    SetupAddressInfo[SetupAddressInfo["AUDIO_RTP_PORT"] = 4] = "AUDIO_RTP_PORT";
})(SetupAddressInfo = exports.SetupAddressInfo || (exports.SetupAddressInfo = {}));
var SetupSRTP_PARAM;
(function (SetupSRTP_PARAM) {
    SetupSRTP_PARAM[SetupSRTP_PARAM["CRYPTO"] = 1] = "CRYPTO";
    SetupSRTP_PARAM[SetupSRTP_PARAM["MASTER_KEY"] = 2] = "MASTER_KEY";
    SetupSRTP_PARAM[SetupSRTP_PARAM["MASTER_SALT"] = 3] = "MASTER_SALT";
})(SetupSRTP_PARAM = exports.SetupSRTP_PARAM || (exports.SetupSRTP_PARAM = {}));
var StreamingStatus;
(function (StreamingStatus) {
    StreamingStatus[StreamingStatus["AVAILABLE"] = 0] = "AVAILABLE";
    StreamingStatus[StreamingStatus["STREAMING"] = 1] = "STREAMING";
    StreamingStatus[StreamingStatus["BUSY"] = 2] = "BUSY";
})(StreamingStatus = exports.StreamingStatus || (exports.StreamingStatus = {}));
var RTPConfigTypes;
(function (RTPConfigTypes) {
    RTPConfigTypes[RTPConfigTypes["CRYPTO"] = 2] = "CRYPTO";
})(RTPConfigTypes = exports.RTPConfigTypes || (exports.RTPConfigTypes = {}));
var SRTPCryptoSuites;
(function (SRTPCryptoSuites) {
    SRTPCryptoSuites[SRTPCryptoSuites["AES_CM_128_HMAC_SHA1_80"] = 0] = "AES_CM_128_HMAC_SHA1_80";
    SRTPCryptoSuites[SRTPCryptoSuites["AES_CM_256_HMAC_SHA1_80"] = 1] = "AES_CM_256_HMAC_SHA1_80";
    SRTPCryptoSuites[SRTPCryptoSuites["NONE"] = 2] = "NONE";
})(SRTPCryptoSuites = exports.SRTPCryptoSuites || (exports.SRTPCryptoSuites = {}));
var VideoTypes;
(function (VideoTypes) {
    VideoTypes[VideoTypes["CODEC"] = 1] = "CODEC";
    VideoTypes[VideoTypes["CODEC_PARAM"] = 2] = "CODEC_PARAM";
    VideoTypes[VideoTypes["ATTRIBUTES"] = 3] = "ATTRIBUTES";
    VideoTypes[VideoTypes["RTP_PARAM"] = 4] = "RTP_PARAM";
})(VideoTypes = exports.VideoTypes || (exports.VideoTypes = {}));
var VideoCodecTypes;
(function (VideoCodecTypes) {
    VideoCodecTypes[VideoCodecTypes["H264"] = 0] = "H264";
})(VideoCodecTypes = exports.VideoCodecTypes || (exports.VideoCodecTypes = {}));
var VideoCodecParamTypes;
(function (VideoCodecParamTypes) {
    VideoCodecParamTypes[VideoCodecParamTypes["PROFILE_ID"] = 1] = "PROFILE_ID";
    VideoCodecParamTypes[VideoCodecParamTypes["LEVEL"] = 2] = "LEVEL";
    VideoCodecParamTypes[VideoCodecParamTypes["PACKETIZATION_MODE"] = 3] = "PACKETIZATION_MODE";
    VideoCodecParamTypes[VideoCodecParamTypes["CVO_ENABLED"] = 4] = "CVO_ENABLED";
    VideoCodecParamTypes[VideoCodecParamTypes["CVO_ID"] = 5] = "CVO_ID";
})(VideoCodecParamTypes = exports.VideoCodecParamTypes || (exports.VideoCodecParamTypes = {}));
var VideoCodecParamCVOTypes;
(function (VideoCodecParamCVOTypes) {
    VideoCodecParamCVOTypes[VideoCodecParamCVOTypes["UNSUPPORTED"] = 1] = "UNSUPPORTED";
    VideoCodecParamCVOTypes[VideoCodecParamCVOTypes["SUPPORTED"] = 2] = "SUPPORTED";
})(VideoCodecParamCVOTypes = exports.VideoCodecParamCVOTypes || (exports.VideoCodecParamCVOTypes = {}));
var VideoCodecParamProfileIDTypes;
(function (VideoCodecParamProfileIDTypes) {
    VideoCodecParamProfileIDTypes[VideoCodecParamProfileIDTypes["BASELINE"] = 0] = "BASELINE";
    VideoCodecParamProfileIDTypes[VideoCodecParamProfileIDTypes["MAIN"] = 1] = "MAIN";
    VideoCodecParamProfileIDTypes[VideoCodecParamProfileIDTypes["HIGH"] = 2] = "HIGH";
})(VideoCodecParamProfileIDTypes = exports.VideoCodecParamProfileIDTypes || (exports.VideoCodecParamProfileIDTypes = {}));
var VideoCodecParamLevelTypes;
(function (VideoCodecParamLevelTypes) {
    VideoCodecParamLevelTypes[VideoCodecParamLevelTypes["TYPE3_1"] = 0] = "TYPE3_1";
    VideoCodecParamLevelTypes[VideoCodecParamLevelTypes["TYPE3_2"] = 1] = "TYPE3_2";
    VideoCodecParamLevelTypes[VideoCodecParamLevelTypes["TYPE4_0"] = 2] = "TYPE4_0";
})(VideoCodecParamLevelTypes = exports.VideoCodecParamLevelTypes || (exports.VideoCodecParamLevelTypes = {}));
var VideoCodecParamPacketizationModeTypes;
(function (VideoCodecParamPacketizationModeTypes) {
    VideoCodecParamPacketizationModeTypes[VideoCodecParamPacketizationModeTypes["NON_INTERLEAVED"] = 0] = "NON_INTERLEAVED";
})(VideoCodecParamPacketizationModeTypes = exports.VideoCodecParamPacketizationModeTypes || (exports.VideoCodecParamPacketizationModeTypes = {}));
var VideoAttributesTypes;
(function (VideoAttributesTypes) {
    VideoAttributesTypes[VideoAttributesTypes["IMAGE_WIDTH"] = 1] = "IMAGE_WIDTH";
    VideoAttributesTypes[VideoAttributesTypes["IMAGE_HEIGHT"] = 2] = "IMAGE_HEIGHT";
    VideoAttributesTypes[VideoAttributesTypes["FRAME_RATE"] = 3] = "FRAME_RATE";
})(VideoAttributesTypes = exports.VideoAttributesTypes || (exports.VideoAttributesTypes = {}));
var SelectedStreamConfigurationTypes;
(function (SelectedStreamConfigurationTypes) {
    SelectedStreamConfigurationTypes[SelectedStreamConfigurationTypes["SESSION"] = 1] = "SESSION";
    SelectedStreamConfigurationTypes[SelectedStreamConfigurationTypes["VIDEO"] = 2] = "VIDEO";
    SelectedStreamConfigurationTypes[SelectedStreamConfigurationTypes["AUDIO"] = 3] = "AUDIO";
})(SelectedStreamConfigurationTypes = exports.SelectedStreamConfigurationTypes || (exports.SelectedStreamConfigurationTypes = {}));
var RTPParamTypes;
(function (RTPParamTypes) {
    RTPParamTypes[RTPParamTypes["PAYLOAD_TYPE"] = 1] = "PAYLOAD_TYPE";
    RTPParamTypes[RTPParamTypes["SYNCHRONIZATION_SOURCE"] = 2] = "SYNCHRONIZATION_SOURCE";
    RTPParamTypes[RTPParamTypes["MAX_BIT_RATE"] = 3] = "MAX_BIT_RATE";
    RTPParamTypes[RTPParamTypes["RTCP_SEND_INTERVAL"] = 4] = "RTCP_SEND_INTERVAL";
    RTPParamTypes[RTPParamTypes["MAX_MTU"] = 5] = "MAX_MTU";
    RTPParamTypes[RTPParamTypes["COMFORT_NOISE_PAYLOAD_TYPE"] = 6] = "COMFORT_NOISE_PAYLOAD_TYPE";
})(RTPParamTypes = exports.RTPParamTypes || (exports.RTPParamTypes = {}));
var AudioTypes;
(function (AudioTypes) {
    AudioTypes[AudioTypes["CODEC"] = 1] = "CODEC";
    AudioTypes[AudioTypes["CODEC_PARAM"] = 2] = "CODEC_PARAM";
    AudioTypes[AudioTypes["RTP_PARAM"] = 3] = "RTP_PARAM";
    AudioTypes[AudioTypes["COMFORT_NOISE"] = 4] = "COMFORT_NOISE";
})(AudioTypes = exports.AudioTypes || (exports.AudioTypes = {}));
var AudioCodecTypes;
(function (AudioCodecTypes) {
    AudioCodecTypes[AudioCodecTypes["PCMU"] = 0] = "PCMU";
    AudioCodecTypes[AudioCodecTypes["PCMA"] = 1] = "PCMA";
    AudioCodecTypes[AudioCodecTypes["AACELD"] = 2] = "AACELD";
    AudioCodecTypes[AudioCodecTypes["OPUS"] = 3] = "OPUS";
})(AudioCodecTypes = exports.AudioCodecTypes || (exports.AudioCodecTypes = {}));
var AudioCodecParamTypes;
(function (AudioCodecParamTypes) {
    AudioCodecParamTypes[AudioCodecParamTypes["CHANNEL"] = 1] = "CHANNEL";
    AudioCodecParamTypes[AudioCodecParamTypes["BIT_RATE"] = 2] = "BIT_RATE";
    AudioCodecParamTypes[AudioCodecParamTypes["SAMPLE_RATE"] = 3] = "SAMPLE_RATE";
    AudioCodecParamTypes[AudioCodecParamTypes["PACKET_TIME"] = 4] = "PACKET_TIME";
})(AudioCodecParamTypes = exports.AudioCodecParamTypes || (exports.AudioCodecParamTypes = {}));
var AudioCodecParamBitRateTypes;
(function (AudioCodecParamBitRateTypes) {
    AudioCodecParamBitRateTypes[AudioCodecParamBitRateTypes["VARIABLE"] = 0] = "VARIABLE";
    AudioCodecParamBitRateTypes[AudioCodecParamBitRateTypes["CONSTANT"] = 1] = "CONSTANT";
})(AudioCodecParamBitRateTypes = exports.AudioCodecParamBitRateTypes || (exports.AudioCodecParamBitRateTypes = {}));
var AudioCodecParamSampleRateTypes;
(function (AudioCodecParamSampleRateTypes) {
    AudioCodecParamSampleRateTypes[AudioCodecParamSampleRateTypes["KHZ_8"] = 0] = "KHZ_8";
    AudioCodecParamSampleRateTypes[AudioCodecParamSampleRateTypes["KHZ_16"] = 1] = "KHZ_16";
    AudioCodecParamSampleRateTypes[AudioCodecParamSampleRateTypes["KHZ_24"] = 2] = "KHZ_24";
})(AudioCodecParamSampleRateTypes = exports.AudioCodecParamSampleRateTypes || (exports.AudioCodecParamSampleRateTypes = {}));
var StreamRequestTypes;
(function (StreamRequestTypes) {
    StreamRequestTypes["RECONFIGURE"] = "reconfigure";
    StreamRequestTypes["START"] = "start";
    StreamRequestTypes["STOP"] = "stop";
})(StreamRequestTypes = exports.StreamRequestTypes || (exports.StreamRequestTypes = {}));
var StreamController = /** @class */ (function () {
    function StreamController(identifier, options, cameraSource) {
        var _this = this;
        this.identifier = identifier;
        this.options = options;
        this.cameraSource = cameraSource;
        this.forceStop = function () {
            _this.connectionID = undefined;
            _this._handleStopStream(undefined, true);
        };
        this.handleCloseConnection = function (connectionID) {
            if (_this.connectionID && _this.connectionID == connectionID) {
                _this.connectionID = undefined;
                _this._handleStopStream();
            }
        };
        // Private
        this._createService = function () {
            var managementService = new Service_1.Service.CameraRTPStreamManagement('', _this.identifier.toString());
            managementService
                .getCharacteristic(Characteristic_1.Characteristic.StreamingStatus)
                .on(Characteristic_1.CharacteristicEventTypes.GET, function (callback) {
                var data = tlv.encode(0x01, _this.streamStatus);
                callback(null, data.toString('base64'));
            }).getValue();
            managementService
                .getCharacteristic(Characteristic_1.Characteristic.SupportedRTPConfiguration)
                .on(Characteristic_1.CharacteristicEventTypes.GET, function (callback) {
                callback(null, _this.supportedRTPConfiguration);
            }).getValue();
            managementService
                .getCharacteristic(Characteristic_1.Characteristic.SupportedVideoStreamConfiguration)
                .on(Characteristic_1.CharacteristicEventTypes.GET, function (callback) {
                callback(null, _this.supportedVideoStreamConfiguration);
            }).getValue();
            managementService
                .getCharacteristic(Characteristic_1.Characteristic.SupportedAudioStreamConfiguration)
                .on(Characteristic_1.CharacteristicEventTypes.GET, function (callback) {
                callback(null, _this.supportedAudioStreamConfiguration);
            }).getValue();
            managementService
                .getCharacteristic(Characteristic_1.Characteristic.SelectedRTPStreamConfiguration)
                .on(Characteristic_1.CharacteristicEventTypes.GET, function (callback) {
                debug('Read SelectedStreamConfiguration');
                callback(null, _this.selectedConfiguration);
            })
                .on(Characteristic_1.CharacteristicEventTypes.SET, function (value, callback, context, connectionID) {
                debug('Write SelectedStreamConfiguration');
                _this._handleSelectedStreamConfigurationWrite(value, callback, connectionID);
            });
            managementService
                .getCharacteristic(Characteristic_1.Characteristic.SetupEndpoints)
                .on(Characteristic_1.CharacteristicEventTypes.GET, function (callback) {
                _this._handleSetupRead(callback);
            })
                .on(Characteristic_1.CharacteristicEventTypes.SET, function (value, callback) {
                _this._handleSetupWrite(value, callback);
            });
            _this.service = managementService;
        };
        this._handleSelectedStreamConfigurationWrite = function (value, callback, connectionID) {
            _this.selectedConfiguration = value;
            var data = Buffer.from(value, 'base64');
            var objects = tlv.decode(data);
            var session;
            if (objects[SelectedStreamConfigurationTypes.SESSION]) {
                session = tlv.decode(objects[SelectedStreamConfigurationTypes.SESSION]);
                _this.sessionIdentifier = session[0x01];
                var requestType = session[0x02][0];
                if (requestType == 1) {
                    if (_this.connectionID && _this.connectionID != connectionID) {
                        debug("Received start stream request from a different connection.");
                    }
                    else {
                        _this.connectionID = connectionID;
                    }
                    _this._handleStartStream(objects, session, false, callback);
                }
                else if (requestType == 0) {
                    if (_this.connectionID && _this.connectionID != connectionID) {
                        debug("Received stop stream request from a different connection.");
                    }
                    else {
                        _this.connectionID = undefined;
                    }
                    _this._handleStopStream(callback);
                }
                else if (requestType == 4) {
                    _this._handleStartStream(objects, session, true, callback);
                }
                else {
                    debug("Unhandled request type: ", requestType);
                    callback();
                }
            }
            else {
                debug("Unexpected request for Selected Stream Configuration");
                callback();
            }
        };
        this._handleStartStream = function (objects, session, reconfigure, callback) {
            if (reconfigure === void 0) { reconfigure = false; }
            var request = {
                sessionID: _this.sessionIdentifier,
                type: !reconfigure ? StreamRequestTypes.START : StreamRequestTypes.RECONFIGURE
            };
            var videoPT = null;
            var audioPT = null;
            if (objects[SelectedStreamConfigurationTypes.VIDEO]) {
                var videoInfo = {};
                var video = tlv.decode(objects[SelectedStreamConfigurationTypes.VIDEO]);
                var codec = video[VideoTypes.CODEC];
                if (video[VideoTypes.CODEC_PARAM]) {
                    var videoCodecParamsTLV = tlv.decode(video[VideoTypes.CODEC_PARAM]);
                    videoInfo["profile"] = videoCodecParamsTLV[VideoCodecParamTypes.PROFILE_ID].readUInt8(0);
                    videoInfo["level"] = videoCodecParamsTLV[VideoCodecParamTypes.LEVEL].readUInt8(0);
                }
                if (video[VideoTypes.ATTRIBUTES]) {
                    var videoAttrTLV = tlv.decode(video[VideoTypes.ATTRIBUTES]);
                    videoInfo["width"] = videoAttrTLV[VideoAttributesTypes.IMAGE_WIDTH].readUInt16LE(0);
                    videoInfo["height"] = videoAttrTLV[VideoAttributesTypes.IMAGE_HEIGHT].readUInt16LE(0);
                    videoInfo["fps"] = videoAttrTLV[VideoAttributesTypes.FRAME_RATE].readUInt8(0);
                }
                if (video[VideoTypes.RTP_PARAM]) {
                    var videoRTPParamsTLV = tlv.decode(video[VideoTypes.RTP_PARAM]);
                    if (videoRTPParamsTLV[RTPParamTypes.SYNCHRONIZATION_SOURCE]) {
                        videoInfo["ssrc"] = videoRTPParamsTLV[RTPParamTypes.SYNCHRONIZATION_SOURCE].readUInt32LE(0);
                    }
                    if (videoRTPParamsTLV[RTPParamTypes.PAYLOAD_TYPE]) {
                        videoPT = videoRTPParamsTLV[RTPParamTypes.PAYLOAD_TYPE].readUInt8(0);
                        videoInfo["pt"] = videoPT;
                    }
                    if (videoRTPParamsTLV[RTPParamTypes.MAX_BIT_RATE]) {
                        videoInfo["max_bit_rate"] = videoRTPParamsTLV[RTPParamTypes.MAX_BIT_RATE].readUInt16LE(0);
                    }
                    if (videoRTPParamsTLV[RTPParamTypes.RTCP_SEND_INTERVAL]) {
                        videoInfo["rtcp_interval"] = videoRTPParamsTLV[RTPParamTypes.RTCP_SEND_INTERVAL].readUInt32LE(0);
                    }
                    if (videoRTPParamsTLV[RTPParamTypes.MAX_MTU]) {
                        videoInfo["mtu"] = videoRTPParamsTLV[RTPParamTypes.MAX_MTU].readUInt16LE(0);
                    }
                }
                request["video"] = videoInfo;
            }
            if (objects[SelectedStreamConfigurationTypes.AUDIO]) {
                var audioInfo = {};
                var audio = tlv.decode(objects[SelectedStreamConfigurationTypes.AUDIO]);
                var codec = audio[AudioTypes.CODEC];
                var audioCodecParamsTLV = tlv.decode(audio[AudioTypes.CODEC_PARAM]);
                var audioRTPParamsTLV = tlv.decode(audio[AudioTypes.RTP_PARAM]);
                var comfortNoise = tlv.decode(audio[AudioTypes.COMFORT_NOISE]);
                var audioCodec = codec.readUInt8(0);
                if (audioCodec !== undefined) {
                    if (audioCodec == AudioCodecTypes.OPUS) {
                        audioInfo["codec"] = "OPUS";
                    }
                    else if (audioCodec == AudioCodecTypes.AACELD) {
                        audioInfo["codec"] = "AAC-eld";
                    }
                    else {
                        debug("Unexpected audio codec: %s", audioCodec);
                        audioInfo["codec"] = audioCodec;
                    }
                }
                audioInfo["channel"] = audioCodecParamsTLV[AudioCodecParamTypes.CHANNEL].readUInt8(0);
                audioInfo["bit_rate"] = audioCodecParamsTLV[AudioCodecParamTypes.BIT_RATE].readUInt8(0);
                var sample_rate_enum = audioCodecParamsTLV[AudioCodecParamTypes.SAMPLE_RATE].readUInt8(0);
                if (sample_rate_enum !== undefined) {
                    if (sample_rate_enum == AudioCodecParamSampleRateTypes.KHZ_8) {
                        audioInfo["sample_rate"] = 8;
                    }
                    else if (sample_rate_enum == AudioCodecParamSampleRateTypes.KHZ_16) {
                        audioInfo["sample_rate"] = 16;
                    }
                    else if (sample_rate_enum == AudioCodecParamSampleRateTypes.KHZ_24) {
                        audioInfo["sample_rate"] = 24;
                    }
                    else {
                        debug("Unexpected audio sample rate: %s", sample_rate_enum);
                    }
                }
                audioInfo["packet_time"] = audioCodecParamsTLV[AudioCodecParamTypes.PACKET_TIME].readUInt8(0);
                var ssrc = audioRTPParamsTLV[RTPParamTypes.SYNCHRONIZATION_SOURCE].readUInt32LE(0);
                audioPT = audioRTPParamsTLV[RTPParamTypes.PAYLOAD_TYPE].readUInt8(0);
                audioInfo["pt"] = audioPT;
                audioInfo["ssrc"] = ssrc;
                audioInfo["max_bit_rate"] = audioRTPParamsTLV[RTPParamTypes.MAX_BIT_RATE].readUInt16LE(0);
                audioInfo["rtcp_interval"] = audioRTPParamsTLV[RTPParamTypes.RTCP_SEND_INTERVAL].readUInt32LE(0);
                audioInfo["comfort_pt"] = audioRTPParamsTLV[RTPParamTypes.COMFORT_NOISE_PAYLOAD_TYPE].readUInt8(0);
                request["audio"] = audioInfo;
            }
            if (!reconfigure && _this.requireProxy) {
                _this.videoProxy.setOutgoingPayloadType(videoPT);
                if (!_this.disableAudioProxy) {
                    _this.audioProxy.setOutgoingPayloadType(audioPT);
                }
            }
            _this.cameraSource && _this.cameraSource.handleStreamRequest(request);
            _this._updateStreamStatus(StreamingStatus.STREAMING);
            callback();
        };
        this._handleStopStream = function (callback, silent) {
            if (silent === void 0) { silent = false; }
            var request = {
                "sessionID": _this.sessionIdentifier,
                "type": StreamRequestTypes.STOP,
            };
            if (!silent) {
                _this.cameraSource && _this.cameraSource.handleStreamRequest(request);
            }
            if (_this.requireProxy) {
                _this.videoProxy.destroy();
                if (!_this.disableAudioProxy) {
                    _this.audioProxy.destroy();
                }
                _this.videoProxy = undefined;
                _this.audioProxy = undefined;
            }
            _this._updateStreamStatus(StreamingStatus.AVAILABLE);
            if (callback) {
                callback();
            }
        };
        this._handleSetupWrite = function (value, callback) {
            var data = Buffer.from("" + value, 'base64');
            var objects = tlv.decode(data);
            _this.sessionIdentifier = objects[SetupTypes.SESSION_ID];
            // Address
            var targetAddressPayload = objects[SetupTypes.ADDRESS];
            var processedAddressInfo = tlv.decode(targetAddressPayload);
            var isIPv6 = processedAddressInfo[SetupAddressInfo.ADDRESS_VER][0];
            var targetAddress = processedAddressInfo[SetupAddressInfo.ADDRESS].toString('utf8');
            var targetVideoPort = processedAddressInfo[SetupAddressInfo.VIDEO_RTP_PORT].readUInt16LE(0);
            var targetAudioPort = processedAddressInfo[SetupAddressInfo.AUDIO_RTP_PORT].readUInt16LE(0);
            // Video SRTP Params
            var videoSRTPPayload = objects[SetupTypes.VIDEO_SRTP_PARAM];
            var processedVideoInfo = tlv.decode(videoSRTPPayload);
            var videoCryptoSuite = processedVideoInfo[SetupSRTP_PARAM.CRYPTO][0];
            var videoMasterKey = processedVideoInfo[SetupSRTP_PARAM.MASTER_KEY];
            var videoMasterSalt = processedVideoInfo[SetupSRTP_PARAM.MASTER_SALT];
            // Audio SRTP Params
            var audioSRTPPayload = objects[SetupTypes.AUDIO_SRTP_PARAM];
            var processedAudioInfo = tlv.decode(audioSRTPPayload);
            var audioCryptoSuite = processedAudioInfo[SetupSRTP_PARAM.CRYPTO][0];
            var audioMasterKey = processedAudioInfo[SetupSRTP_PARAM.MASTER_KEY];
            var audioMasterSalt = processedAudioInfo[SetupSRTP_PARAM.MASTER_SALT];
            debug('\nSession: ', _this.sessionIdentifier, '\nControllerAddress: ', targetAddress, '\nVideoPort: ', targetVideoPort, '\nAudioPort: ', targetAudioPort, '\nVideo Crypto: ', videoCryptoSuite, '\nVideo Master Key: ', videoMasterKey, '\nVideo Master Salt: ', videoMasterSalt, '\nAudio Crypto: ', audioCryptoSuite, '\nAudio Master Key: ', audioMasterKey, '\nAudio Master Salt: ', audioMasterSalt);
            var request = {
                "sessionID": _this.sessionIdentifier,
            };
            var videoInfo = {};
            var audioInfo = {};
            if (_this.supportSRTP) {
                videoInfo["srtp_key"] = videoMasterKey;
                videoInfo["srtp_salt"] = videoMasterSalt;
                audioInfo["srtp_key"] = audioMasterKey;
                audioInfo["srtp_salt"] = audioMasterSalt;
            }
            if (!_this.requireProxy) {
                request["targetAddress"] = targetAddress;
                videoInfo["port"] = targetVideoPort;
                audioInfo["port"] = targetAudioPort;
                request["video"] = videoInfo;
                request["audio"] = audioInfo;
                _this.cameraSource && _this.cameraSource.prepareStream(request, function (response) {
                    _this._generateSetupResponse(_this.sessionIdentifier, response, callback);
                });
            }
            else {
                request["targetAddress"] = ip_1.default.address();
                var promises = [];
                var videoSSRCNumber = crypto_1.default.randomBytes(4).readUInt32LE(0);
                _this.videoProxy = new RTPProxy_1.default({
                    outgoingAddress: targetAddress,
                    outgoingPort: targetVideoPort,
                    outgoingSSRC: videoSSRCNumber,
                    disabled: false
                });
                promises.push(_this.videoProxy.setup());
                if (!_this.disableAudioProxy) {
                    var audioSSRCNumber = crypto_1.default.randomBytes(4).readUInt32LE(0);
                    _this.audioProxy = new RTPProxy_1.default({
                        outgoingAddress: targetAddress,
                        outgoingPort: targetAudioPort,
                        outgoingSSRC: audioSSRCNumber,
                        disabled: _this.videoOnly
                    });
                    promises.push(_this.audioProxy.setup());
                }
                else {
                    audioInfo["port"] = targetAudioPort;
                    audioInfo["targetAddress"] = targetAddress;
                }
                Promise.all(promises).then(function () {
                    videoInfo["proxy_rtp"] = _this.videoProxy.incomingRTPPort();
                    videoInfo["proxy_rtcp"] = _this.videoProxy.incomingRTCPPort();
                    if (!_this.disableAudioProxy) {
                        audioInfo["proxy_rtp"] = _this.audioProxy.incomingRTPPort();
                        audioInfo["proxy_rtcp"] = _this.audioProxy.incomingRTCPPort();
                    }
                    request["video"] = videoInfo;
                    request["audio"] = audioInfo;
                    _this.cameraSource && _this.cameraSource.prepareStream(request, function (response) {
                        _this._generateSetupResponse(_this.sessionIdentifier, response, callback);
                    });
                });
            }
        };
        this._generateSetupResponse = function (identifier, response, callback) {
            var ipVer = 0;
            var ipAddress = null;
            var videoPort = Buffer.alloc(2);
            var audioPort = Buffer.alloc(2);
            var videoSSRC = Buffer.alloc(4);
            var audioSSRC = Buffer.alloc(4);
            var videoSRTP = Buffer.from([0x01, 0x01, 0x02, 0x02, 0x00, 0x03, 0x00]);
            var audioSRTP = Buffer.from([0x01, 0x01, 0x02, 0x02, 0x00, 0x03, 0x00]);
            if (_this.requireProxy) {
                var currentAddress = ip_1.default.address();
                ipVer = 1;
                if (ip_1.default.isV4Format(currentAddress)) {
                    ipVer = 0;
                }
                ipAddress = Buffer.from(currentAddress);
                videoPort.writeUInt16LE(_this.videoProxy.outgoingLocalPort(), 0);
                if (!_this.disableAudioProxy) {
                    audioPort.writeUInt16LE(_this.audioProxy.outgoingLocalPort(), 0);
                }
                var videoInfo = response["video"];
                var video_pt = videoInfo["proxy_pt"];
                var video_serverAddr = videoInfo["proxy_server_address"];
                var video_serverRTP = videoInfo["proxy_server_rtp"];
                var video_serverRTCP = videoInfo["proxy_server_rtcp"];
                _this.videoProxy.setIncomingPayloadType(video_pt);
                _this.videoProxy.setServerAddress(video_serverAddr);
                _this.videoProxy.setServerRTPPort(video_serverRTP);
                _this.videoProxy.setServerRTCPPort(video_serverRTCP);
                videoSSRC.writeUInt32LE(_this.videoProxy.outgoingSSRC, 0);
                var audioInfo = response["audio"];
                if (!_this.disableAudioProxy) {
                    var audio_pt = audioInfo["proxy_pt"];
                    var audio_serverAddr = audioInfo["proxy_server_address"];
                    var audio_serverRTP = audioInfo["proxy_server_rtp"];
                    var audio_serverRTCP = audioInfo["proxy_server_rtcp"];
                    _this.audioProxy.setIncomingPayloadType(audio_pt);
                    _this.audioProxy.setServerAddress(audio_serverAddr);
                    _this.audioProxy.setServerRTPPort(audio_serverRTP);
                    _this.audioProxy.setServerRTCPPort(audio_serverRTCP);
                    audioSSRC.writeUInt32LE(_this.audioProxy.outgoingSSRC, 0);
                }
                else {
                    audioPort.writeUInt16LE(audioInfo["port"], 0);
                    audioSSRC.writeUInt32LE(audioInfo["ssrc"], 0);
                }
            }
            else {
                var addressInfo = response["address"];
                if (addressInfo["type"] == "v6") {
                    ipVer = 1;
                }
                else {
                    ipVer = 0;
                }
                ipAddress = addressInfo["address"];
                var videoInfo = response["video"];
                videoPort.writeUInt16LE(videoInfo["port"], 0);
                videoSSRC.writeUInt32LE(videoInfo["ssrc"], 0);
                var audioInfo = response["audio"];
                audioPort.writeUInt16LE(audioInfo["port"], 0);
                audioSSRC.writeUInt32LE(audioInfo["ssrc"], 0);
                if (_this.supportSRTP) {
                    var videoKey = videoInfo["srtp_key"];
                    var videoSalt = videoInfo["srtp_salt"];
                    var audioKey = audioInfo["srtp_key"];
                    var audioSalt = audioInfo["srtp_salt"];
                    videoSRTP = tlv.encode(SetupSRTP_PARAM.CRYPTO, SRTPCryptoSuites.AES_CM_128_HMAC_SHA1_80, SetupSRTP_PARAM.MASTER_KEY, videoKey, SetupSRTP_PARAM.MASTER_SALT, videoSalt);
                    audioSRTP = tlv.encode(SetupSRTP_PARAM.CRYPTO, SRTPCryptoSuites.AES_CM_128_HMAC_SHA1_80, SetupSRTP_PARAM.MASTER_KEY, audioKey, SetupSRTP_PARAM.MASTER_SALT, audioSalt);
                }
            }
            var addressTLV = tlv.encode(SetupAddressInfo.ADDRESS_VER, ipVer, SetupAddressInfo.ADDRESS, ipAddress, SetupAddressInfo.VIDEO_RTP_PORT, videoPort, SetupAddressInfo.AUDIO_RTP_PORT, audioPort);
            var responseTLV = tlv.encode(SetupTypes.SESSION_ID, identifier, SetupTypes.STATUS, SetupStatus.SUCCESS, SetupTypes.ADDRESS, addressTLV, SetupTypes.VIDEO_SRTP_PARAM, videoSRTP, SetupTypes.AUDIO_SRTP_PARAM, audioSRTP, SetupTypes.VIDEO_SSRC, videoSSRC, SetupTypes.AUDIO_SSRC, audioSSRC);
            _this.setupResponse = responseTLV.toString('base64');
            callback();
        };
        this._updateStreamStatus = function (status) {
            _this.streamStatus = status;
            _this.service && _this.service
                .getCharacteristic(Characteristic_1.Characteristic.StreamingStatus)
                .setValue(tlv.encode(0x01, _this.streamStatus).toString('base64'));
        };
        this._handleSetupRead = function (callback) {
            debug('Setup Read');
            callback(null, _this.setupResponse);
        };
        this._supportedRTPConfiguration = function (supportSRTP) {
            var cryptoSuite = SRTPCryptoSuites.AES_CM_128_HMAC_SHA1_80;
            if (!supportSRTP) {
                cryptoSuite = SRTPCryptoSuites.NONE;
                debug("Client claims it doesn't support SRTP. The stream may stops working with future iOS releases.");
            }
            return tlv.encode(RTPConfigTypes.CRYPTO, cryptoSuite).toString('base64');
        };
        this._supportedVideoStreamConfiguration = function (videoParams) {
            var codec = videoParams["codec"];
            if (!codec) {
                throw new Error('Video codec cannot be undefined');
            }
            var videoCodecParamsTLV = tlv.encode(VideoCodecParamTypes.PACKETIZATION_MODE, VideoCodecParamPacketizationModeTypes.NON_INTERLEAVED);
            var profiles = codec["profiles"];
            profiles.forEach(function (value) {
                var tlvBuffer = tlv.encode(VideoCodecParamTypes.PROFILE_ID, value);
                videoCodecParamsTLV = Buffer.concat([videoCodecParamsTLV, tlvBuffer]);
            });
            var levels = codec["levels"];
            levels.forEach(function (value) {
                var tlvBuffer = tlv.encode(VideoCodecParamTypes.LEVEL, value);
                videoCodecParamsTLV = Buffer.concat([videoCodecParamsTLV, tlvBuffer]);
            });
            var resolutions = videoParams["resolutions"];
            if (!resolutions) {
                throw new Error('Video resolutions cannot be undefined');
            }
            var videoAttrsTLV = Buffer.alloc(0);
            resolutions.forEach(function (resolution) {
                if (resolution.length != 3) {
                    throw new Error('Unexpected video resolution');
                }
                var imageWidth = Buffer.alloc(2);
                imageWidth.writeUInt16LE(resolution[0], 0);
                var imageHeight = Buffer.alloc(2);
                imageHeight.writeUInt16LE(resolution[1], 0);
                var frameRate = Buffer.alloc(1);
                frameRate.writeUInt8(resolution[2], 0);
                var videoAttrTLV = tlv.encode(VideoAttributesTypes.IMAGE_WIDTH, imageWidth, VideoAttributesTypes.IMAGE_HEIGHT, imageHeight, VideoAttributesTypes.FRAME_RATE, frameRate);
                var videoAttrBuffer = tlv.encode(VideoTypes.ATTRIBUTES, videoAttrTLV);
                videoAttrsTLV = Buffer.concat([videoAttrsTLV, videoAttrBuffer]);
            });
            var configurationTLV = tlv.encode(VideoTypes.CODEC, VideoCodecTypes.H264, VideoTypes.CODEC_PARAM, videoCodecParamsTLV);
            return tlv.encode(0x01, Buffer.concat([configurationTLV, videoAttrsTLV])).toString('base64');
        };
        this._supportedAudioStreamConfiguration = function (audioParams) {
            // Only AACELD and OPUS are accepted by iOS currently, and we need to give it something it will accept
            // for it to start the video stream.
            var comfortNoiseValue = 0x00;
            if (audioParams["comfort_noise"] === true) {
                comfortNoiseValue = 0x01;
            }
            var codecs = audioParams["codecs"];
            if (!codecs) {
                throw new Error('Audio codecs cannot be undefined');
            }
            var audioConfigurationsBuffer = Buffer.alloc(0);
            var hasSupportedCodec = false;
            codecs.forEach(function (codecParam) {
                var codec = AudioCodecTypes.OPUS;
                var bitrate = AudioCodecParamBitRateTypes.CONSTANT;
                var samplerate = AudioCodecParamSampleRateTypes.KHZ_24;
                var param_type = codecParam["type"];
                var param_samplerate = codecParam["samplerate"];
                if (param_type == 'OPUS') {
                    hasSupportedCodec = true;
                    bitrate = AudioCodecParamBitRateTypes.VARIABLE;
                }
                else if (param_type == "AAC-eld") {
                    hasSupportedCodec = true;
                    codec = AudioCodecTypes.AACELD;
                    bitrate = AudioCodecParamBitRateTypes.VARIABLE;
                }
                else {
                    debug("Unsupported codec: ", param_type);
                    return;
                }
                if (param_samplerate == 8) {
                    samplerate = AudioCodecParamSampleRateTypes.KHZ_8;
                }
                else if (param_samplerate == 16) {
                    samplerate = AudioCodecParamSampleRateTypes.KHZ_16;
                }
                else if (param_samplerate == 24) {
                    samplerate = AudioCodecParamSampleRateTypes.KHZ_24;
                }
                else {
                    debug("Unsupported sample rate: ", param_samplerate);
                    return;
                }
                var audioParamTLV = tlv.encode(AudioCodecParamTypes.CHANNEL, 1, AudioCodecParamTypes.BIT_RATE, bitrate, AudioCodecParamTypes.SAMPLE_RATE, samplerate);
                var audioConfiguration = tlv.encode(AudioTypes.CODEC, codec, AudioTypes.CODEC_PARAM, audioParamTLV);
                audioConfigurationsBuffer = Buffer.concat([audioConfigurationsBuffer, tlv.encode(0x01, audioConfiguration)]);
            });
            // If we're not one of the supported codecs
            if (!hasSupportedCodec) {
                debug("Client doesn't support any audio codec that HomeKit supports.");
                var codec = AudioCodecTypes.OPUS;
                var bitrate = AudioCodecParamBitRateTypes.VARIABLE;
                var samplerate = AudioCodecParamSampleRateTypes.KHZ_24;
                var audioParamTLV = tlv.encode(AudioCodecParamTypes.CHANNEL, 1, AudioCodecParamTypes.BIT_RATE, bitrate, AudioCodecParamTypes.SAMPLE_RATE, AudioCodecParamSampleRateTypes.KHZ_24);
                var audioConfiguration = tlv.encode(AudioTypes.CODEC, codec, AudioTypes.CODEC_PARAM, audioParamTLV);
                audioConfigurationsBuffer = tlv.encode(0x01, audioConfiguration);
                _this.videoOnly = true;
            }
            return Buffer.concat([audioConfigurationsBuffer, tlv.encode(0x02, comfortNoiseValue)]).toString('base64');
        };
        if (identifier === undefined) {
            throw new Error('Identifier cannot be undefined');
        }
        if (!options) {
            throw new Error('Options cannot be undefined');
        }
        if (!cameraSource) {
            throw new Error('CameraSource cannot be undefined');
        }
        this.identifier = identifier;
        this.cameraSource = cameraSource;
        this.requireProxy = options["proxy"] || false;
        this.disableAudioProxy = options["disable_audio_proxy"] || false;
        this.supportSRTP = options["srtp"] || false;
        this.supportedRTPConfiguration = this._supportedRTPConfiguration(this.supportSRTP);
        var videoParams = options["video"];
        if (!videoParams) {
            throw new Error('Video parameters cannot be undefined in options');
        }
        this.supportedVideoStreamConfiguration = this._supportedVideoStreamConfiguration(videoParams);
        var audioParams = options["audio"];
        if (!audioParams) {
            throw new Error('Audio parameters cannot be undefined in options');
        }
        this.supportedAudioStreamConfiguration = this._supportedAudioStreamConfiguration(audioParams);
        this.selectedConfiguration = null;
        this.sessionIdentifier = null;
        this.streamStatus = StreamingStatus.AVAILABLE;
        this.videoOnly = false;
        this._createService();
    }
    StreamController.SetupTypes = SetupTypes;
    StreamController.SetupStatus = SetupStatus;
    StreamController.SetupAddressVer = SetupAddressVer;
    StreamController.SetupAddressInfo = SetupAddressInfo;
    StreamController.SetupSRTP_PARAM = SetupSRTP_PARAM;
    StreamController.StreamingStatus = StreamingStatus;
    StreamController.RTPConfigTypes = RTPConfigTypes;
    StreamController.SRTPCryptoSuites = SRTPCryptoSuites;
    StreamController.VideoTypes = VideoTypes;
    StreamController.VideoCodecTypes = VideoCodecTypes;
    StreamController.VideoCodecParamTypes = VideoCodecParamTypes;
    StreamController.VideoCodecParamCVOTypes = VideoCodecParamCVOTypes;
    StreamController.VideoCodecParamProfileIDTypes = VideoCodecParamProfileIDTypes;
    StreamController.VideoCodecParamLevelTypes = VideoCodecParamLevelTypes;
    StreamController.VideoCodecParamPacketizationModeTypes = VideoCodecParamPacketizationModeTypes;
    StreamController.VideoAttributesTypes = VideoAttributesTypes;
    StreamController.SelectedStreamConfigurationTypes = SelectedStreamConfigurationTypes;
    StreamController.RTPParamTypes = RTPParamTypes;
    StreamController.AudioTypes = AudioTypes;
    StreamController.AudioCodecTypes = AudioCodecTypes;
    StreamController.AudioCodecParamTypes = AudioCodecParamTypes;
    StreamController.AudioCodecParamBitRateTypes = AudioCodecParamBitRateTypes;
    StreamController.AudioCodecParamSampleRateTypes = AudioCodecParamSampleRateTypes;
    return StreamController;
}());
exports.StreamController = StreamController;
//# sourceMappingURL=StreamController.js.map