/// <reference types="node" />
import { Service } from './Service';
import { Camera } from './Camera';
import { Address, AudioInfo, CharacteristicValue, NodeCallback, Nullable, SessionIdentifier, Source, StreamAudioParams, StreamVideoParams, VideoInfo, VoidCallback } from '../types';
export declare enum SetupTypes {
    SESSION_ID = 1,
    STATUS = 2,
    ADDRESS = 3,
    VIDEO_SRTP_PARAM = 4,
    AUDIO_SRTP_PARAM = 5,
    VIDEO_SSRC = 6,
    AUDIO_SSRC = 7
}
export declare enum SetupStatus {
    SUCCESS = 0,
    BUSY = 1,
    ERROR = 2
}
export declare enum SetupAddressVer {
    IPV4 = 0,
    IPV6 = 1
}
export declare enum SetupAddressInfo {
    ADDRESS_VER = 1,
    ADDRESS = 2,
    VIDEO_RTP_PORT = 3,
    AUDIO_RTP_PORT = 4
}
export declare enum SetupSRTP_PARAM {
    CRYPTO = 1,
    MASTER_KEY = 2,
    MASTER_SALT = 3
}
export declare enum StreamingStatus {
    AVAILABLE = 0,
    STREAMING = 1,
    BUSY = 2
}
export declare enum RTPConfigTypes {
    CRYPTO = 2
}
export declare enum SRTPCryptoSuites {
    AES_CM_128_HMAC_SHA1_80 = 0,
    AES_CM_256_HMAC_SHA1_80 = 1,
    NONE = 2
}
export declare enum VideoTypes {
    CODEC = 1,
    CODEC_PARAM = 2,
    ATTRIBUTES = 3,
    RTP_PARAM = 4
}
export declare enum VideoCodecTypes {
    H264 = 0
}
export declare enum VideoCodecParamTypes {
    PROFILE_ID = 1,
    LEVEL = 2,
    PACKETIZATION_MODE = 3,
    CVO_ENABLED = 4,
    CVO_ID = 5
}
export declare enum VideoCodecParamCVOTypes {
    UNSUPPORTED = 1,
    SUPPORTED = 2
}
export declare enum VideoCodecParamProfileIDTypes {
    BASELINE = 0,
    MAIN = 1,
    HIGH = 2
}
export declare enum VideoCodecParamLevelTypes {
    TYPE3_1 = 0,
    TYPE3_2 = 1,
    TYPE4_0 = 2
}
export declare enum VideoCodecParamPacketizationModeTypes {
    NON_INTERLEAVED = 0
}
export declare enum VideoAttributesTypes {
    IMAGE_WIDTH = 1,
    IMAGE_HEIGHT = 2,
    FRAME_RATE = 3
}
export declare enum SelectedStreamConfigurationTypes {
    SESSION = 1,
    VIDEO = 2,
    AUDIO = 3
}
export declare enum RTPParamTypes {
    PAYLOAD_TYPE = 1,
    SYNCHRONIZATION_SOURCE = 2,
    MAX_BIT_RATE = 3,
    RTCP_SEND_INTERVAL = 4,
    MAX_MTU = 5,
    COMFORT_NOISE_PAYLOAD_TYPE = 6
}
export declare enum AudioTypes {
    CODEC = 1,
    CODEC_PARAM = 2,
    RTP_PARAM = 3,
    COMFORT_NOISE = 4
}
export declare enum AudioCodecTypes {
    PCMU = 0,
    PCMA = 1,
    AACELD = 2,
    OPUS = 3
}
export declare enum AudioCodecParamTypes {
    CHANNEL = 1,
    BIT_RATE = 2,
    SAMPLE_RATE = 3,
    PACKET_TIME = 4
}
export declare enum AudioCodecParamBitRateTypes {
    VARIABLE = 0,
    CONSTANT = 1
}
export declare enum AudioCodecParamSampleRateTypes {
    KHZ_8 = 0,
    KHZ_16 = 1,
    KHZ_24 = 2
}
export declare type StreamControllerOptions = {
    proxy: boolean;
    disable_audio_proxy: boolean;
    srtp: boolean;
    audio: StreamAudioParams;
    video: StreamVideoParams;
};
export declare type HandleSetupReadCallback = NodeCallback<string | undefined>;
export declare type HandleSetupWriteCallback = () => any;
export declare type HandleStartStreamCallback = VoidCallback;
export declare enum StreamRequestTypes {
    RECONFIGURE = "reconfigure",
    START = "start",
    STOP = "stop"
}
export declare type StreamRequest = {
    sessionID: SessionIdentifier;
    type: StreamRequestTypes;
    video?: VideoInfo;
    audio?: AudioInfo;
};
export declare type StartStreamRequest = {
    sessionID: SessionIdentifier;
    type: StreamRequestTypes.START;
    audio: AudioInfo;
    video: VideoInfo;
};
export declare type ReconfigureStreamRequest = {
    sessionID: SessionIdentifier;
    type: StreamRequestTypes.RECONFIGURE;
    audio: AudioInfo;
    video: VideoInfo;
};
export declare type StopStreamRequest = {
    sessionID: SessionIdentifier;
    type: StreamRequestTypes.STOP;
};
export declare type PrepareStreamRequest = {
    sessionID: SessionIdentifier;
    targetAddress: string;
    audio: Source;
    video: Source;
};
export declare type PreparedStreamRequestCallback = (response: PreparedStreamResponse) => void;
export declare type SourceResponse = {
    ssrc: number;
    proxy_pt: string;
    proxy_server_address: string;
    proxy_server_rtp: number;
    proxy_server_rtcp: number;
};
export declare type PreparedStreamResponse = {
    address: Address;
    audio: Source & Partial<SourceResponse>;
    video: Source & Partial<SourceResponse>;
};
export declare class StreamController {
    identifier: any;
    options: StreamControllerOptions;
    cameraSource?: Camera | undefined;
    static SetupTypes: typeof SetupTypes;
    static SetupStatus: typeof SetupStatus;
    static SetupAddressVer: typeof SetupAddressVer;
    static SetupAddressInfo: typeof SetupAddressInfo;
    static SetupSRTP_PARAM: typeof SetupSRTP_PARAM;
    static StreamingStatus: typeof StreamingStatus;
    static RTPConfigTypes: typeof RTPConfigTypes;
    static SRTPCryptoSuites: typeof SRTPCryptoSuites;
    static VideoTypes: typeof VideoTypes;
    static VideoCodecTypes: typeof VideoCodecTypes;
    static VideoCodecParamTypes: typeof VideoCodecParamTypes;
    static VideoCodecParamCVOTypes: typeof VideoCodecParamCVOTypes;
    static VideoCodecParamProfileIDTypes: typeof VideoCodecParamProfileIDTypes;
    static VideoCodecParamLevelTypes: typeof VideoCodecParamLevelTypes;
    static VideoCodecParamPacketizationModeTypes: typeof VideoCodecParamPacketizationModeTypes;
    static VideoAttributesTypes: typeof VideoAttributesTypes;
    static SelectedStreamConfigurationTypes: typeof SelectedStreamConfigurationTypes;
    static RTPParamTypes: typeof RTPParamTypes;
    static AudioTypes: typeof AudioTypes;
    static AudioCodecTypes: typeof AudioCodecTypes;
    static AudioCodecParamTypes: typeof AudioCodecParamTypes;
    static AudioCodecParamBitRateTypes: typeof AudioCodecParamBitRateTypes;
    static AudioCodecParamSampleRateTypes: typeof AudioCodecParamSampleRateTypes;
    requireProxy: boolean;
    disableAudioProxy: boolean;
    supportSRTP: boolean;
    supportedRTPConfiguration: string;
    supportedVideoStreamConfiguration: string;
    supportedAudioStreamConfiguration: string;
    selectedConfiguration: null;
    sessionIdentifier: Nullable<SessionIdentifier>;
    streamStatus: StreamingStatus;
    videoOnly: boolean;
    connectionID?: string;
    service?: Service;
    setupResponse?: string;
    audioProxy: any;
    videoProxy: any;
    constructor(identifier: any, options: StreamControllerOptions, cameraSource?: Camera | undefined);
    forceStop: () => void;
    handleCloseConnection: (connectionID: string) => void;
    _createService: () => void;
    _handleSelectedStreamConfigurationWrite: (value: any, callback: any, connectionID: string) => void;
    _handleStartStream: (objects: Record<number, Buffer>, session: any, reconfigure: boolean | undefined, callback: VoidCallback) => void;
    _handleStopStream: (callback?: VoidCallback | undefined, silent?: boolean) => void;
    _handleSetupWrite: (value: CharacteristicValue, callback: HandleSetupWriteCallback) => void;
    _generateSetupResponse: (identifier: string | Buffer, response: PreparedStreamResponse, callback: VoidCallback) => void;
    _updateStreamStatus: (status: number) => void;
    _handleSetupRead: (callback: NodeCallback<string | undefined>) => void;
    _supportedRTPConfiguration: (supportSRTP: boolean) => string;
    _supportedVideoStreamConfiguration: (videoParams: StreamVideoParams) => string;
    _supportedAudioStreamConfiguration: (audioParams: StreamAudioParams) => string;
}
//# sourceMappingURL=StreamController.d.ts.map