"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = __importDefault(require("crypto"));
// http://stackoverflow.com/a/25951500/66673
function generate(data) {
    var sha1sum = crypto_1.default.createHash('sha1');
    sha1sum.update(data);
    var s = sha1sum.digest('hex');
    var i = -1;
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        i += 1;
        switch (c) {
            case 'y':
                return ((parseInt('0x' + s[i], 16) & 0x3) | 0x8).toString(16);
            case 'x':
            default:
                return s[i];
        }
    });
}
exports.generate = generate;
var VALID_UUID_REGEX = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
function isValid(UUID) {
    return VALID_UUID_REGEX.test(UUID);
}
exports.isValid = isValid;
// https://github.com/defunctzombie/node-uuid/blob/master/uuid.js
function unparse(buf, offset) {
    if (offset === void 0) { offset = 0; }
    var i = offset;
    return buf[i++].toString(16) + buf[i++].toString(16) +
        buf[i++].toString(16) + buf[i++].toString(16) + '-' +
        buf[i++].toString(16) + buf[i++].toString(16) + '-' +
        buf[i++].toString(16) + buf[i++].toString(16) + '-' +
        buf[i++].toString(16) + buf[i++].toString(16) + '-' +
        buf[i++].toString(16) + buf[i++].toString(16) +
        buf[i++].toString(16) + buf[i++].toString(16) +
        buf[i++].toString(16) + buf[i++].toString(16);
}
exports.unparse = unparse;
function write(uuid, buf, offset) {
    if (offset === void 0) { offset = 0; }
    uuid = uuid.replace(/-/g, "");
    for (var i = 0; i < uuid.length; i += 2) {
        var octet = uuid.substring(i, i + 2);
        buf.write(octet, offset++, undefined, "hex");
    }
}
exports.write = write;
//# sourceMappingURL=uuid.js.map