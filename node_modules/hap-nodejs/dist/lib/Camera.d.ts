/// <reference types="node" />
import { ChildProcess } from 'child_process';
import { Service } from './Service';
import { PreparedStreamRequestCallback, PrepareStreamRequest, StreamController, StreamControllerOptions, StreamRequest } from "./StreamController";
import { NodeCallback } from '../types';
export declare type SnapshotRequest = {
    height: number;
    width: number;
};
export declare type SessionInfo = {
    address: string;
    audio_port: number;
    audio_srtp: Buffer;
    audio_ssrc: number;
    video_port: number;
    video_srtp: Buffer;
    video_ssrc: number;
};
export declare class Camera {
    services: Service[];
    streamControllers: StreamController[];
    pendingSessions: Record<string, SessionInfo>;
    ongoingSessions: Record<string, ChildProcess>;
    constructor();
    handleSnapshotRequest: (request: SnapshotRequest, callback: NodeCallback<Buffer>) => void;
    handleCloseConnection: (connectionID: string) => void;
    prepareStream: (request: PrepareStreamRequest, callback: PreparedStreamRequestCallback) => void;
    handleStreamRequest: (request: StreamRequest) => void;
    createCameraControlService: () => void;
    createSecureVideoService: () => void;
    _createStreamControllers: (maxStreams: number, options: StreamControllerOptions) => void;
}
//# sourceMappingURL=Camera.d.ts.map