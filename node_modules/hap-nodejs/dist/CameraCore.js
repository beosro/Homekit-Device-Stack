"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var node_persist_1 = __importDefault(require("node-persist"));
var _1 = require("./");
console.log("HAP-NodeJS starting...");
// Initialize our storage system
node_persist_1.default.initSync();
// Start by creating our Bridge which will host all loaded Accessories
var cameraAccessory = new _1.Accessory('Node Camera', _1.uuid.generate("Node Camera"));
var cameraSource = new _1.Camera();
cameraAccessory.configureCameraSource(cameraSource);
cameraAccessory.on(_1.AccessoryEventTypes.IDENTIFY, function (paired, callback) {
    console.log("Node Camera identify");
    callback(); // success
});
// Publish the camera on the local network.
cameraAccessory.publish({
    username: "EC:22:3D:D3:CE:CE",
    port: 51062,
    pincode: "031-45-154",
    category: _1.Categories.CAMERA
}, true);
var signals = { 'SIGINT': 2, 'SIGTERM': 15 };
Object.keys(signals).forEach(function (signal) {
    process.on(signal, function () {
        cameraAccessory.unpublish();
        setTimeout(function () {
            process.exit(128 + signals[signal]);
        }, 1000);
    });
});
//# sourceMappingURL=CameraCore.js.map